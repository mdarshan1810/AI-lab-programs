PART B:

#1.Implement and Demonstrate Depth First Search Algorithm on Water Jug Problem
from collections import defaultdict
visited=defaultdict(lambda:False)
j1,j2,l=0,0,0
def water_jug_problem(x,y):
    global j1,j2,l
    if(x==l and y==0) or (x==0 and y==l):
        print('(',x,',',y,')',sep=" ")
        return True
    if visited[(x,y)]==False:
        print('(',x,',',y,')',sep=" ")
        visited[(x,y)]=True
        return( water_jug_problem(0,y)  or water_jug_problem(x,0) or
                water_jug_problem(j1,y) or water_jug_problem(x,j2)or
                water_jug_problem(x+min(y,(j1-x)),y-min(y,(j1-x)))or
                water_jug_problem(x-min(x,(j2-y)),y+min(x,(j2-y))))
    else:
        return False
j1,j2,l=5,3,4
print("path ia as follows :")
water_jug_problem(0,0)
 
output:
path ia as follows :
( 0 , 0 )
( 5 , 0 )
( 5 , 3 )
( 0 , 3 )
( 3 , 0 )
( 3 , 3 )
( 5 , 1 )
( 0 , 1 )
( 1 , 0 )
( 1 , 3 )
( 4 , 0 )

--------------------------------------------------------------------------------------------------------------------------

#2. Implement and Demonstrate Best First Search Algorithm on any AI problem
from heuristicsearch.a_star_search import AStar

print('Graph-A')
adj_list = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1), ('G', 9)],
    'C': None,
    'E': [('D', 6)],
    'D': [('G', 1)]
}
Heuristic = {
    'A': 10,
    'B': 6,
    'C': 99,
    'D': 1,
    'E': 7,
    'G': 0
}
graph = AStar(adj_list, Heuristic)
graph.apply_a_star(start='A', stop='G')

--------------------------------------------------------------------------------------------------------------------------------------

#3. Implement AO* Search algorithm
from heuristicsearch.ao_star import AOStar
print('Graph-A')
adj_list={
    'A':[[('C',2),('D',3)],[('B',4)]],
    'B':[[('E',1)],[('F',4)]],
    'C':[[('G',3)],[('H',2),('I',3)]],
    'D':[[('J',3)]]
}
Heuristic={
    'A': -1,
    'B': 4,
    'C': 2,
    'D': 3,
    'E': 6,
    'F': 8,
    'G': 2,
    'H': 0,
    'I': 0,
    'J': 0
}
graph=AOStar(adj_list,Heuristic,'A')
graph.applyAOStar()

output:
Graph-A
PROCESSING NODE : A
-----------------------------------------------------------------------------------------
8 ['B']

PROCESSING NODE : B
-----------------------------------------------------------------------------------------
7 ['E']

PROCESSING NODE : A
-----------------------------------------------------------------------------------------
10 ['C', 'D']

PROCESSING NODE : E
-----------------------------------------------------------------------------------------
0 []

PROCESSING NODE : B
-----------------------------------------------------------------------------------------
1 ['E']

PROCESSING NODE : A
-----------------------------------------------------------------------------------------
5 ['B']

FOR THE SOLUTION, TRAVERSE THE GRAPH FROM THE START NODE: A
------------------------------------------------------------
{'E': [], 'B': ['E'], 'A': ['B']}
------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------

#4. Solve 8-Queens Problem with suitable assumptions
print ("Enter the number of queens")
N = int(input())

board = [[0]*N for _ in range(N)]

def attack(i, j):
    for k in range(0,N):
        if board[i][k]==1 or board[k][j]==1:
            return True
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]==1:
                    return True
    return False

def N_queens(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(attack(i,j))) and (board[i][j]!=1):
                board[i][j] = 1
                if N_queens(n-1)==True:
                    return True
                board[i][j] = 0
    return False

N_queens(N)
for i in board:
    print (i)

output:
Enter the number of queens
5
[1, 0, 0, 0, 0]
[0, 0, 1, 0, 0]
[0, 0, 0, 0, 1]
[0, 1, 0, 0, 0]
[0, 0, 0, 1, 0]

-------------------------------------------------------------------------------------------------------------------------------------------------------

#5. Implementation of TSP using heuristic approach
from sys import maxsize
from itertools import permutations
V = 4
# implementation of traveling Salesman Problem
def travellingSalesmanProblem(graph, s):
 # store all vertex apart from source vertex
    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
 # store minimum weight
    min_path = maxsize
    next_permutation=permutations(vertex)
    for i in next_permutation:
        current_pathweight = 0
 # compute current path weight
    k = s
    for j in i:
        current_pathweight += graph[k][j]
    k = j
    current_pathweight += graph[k][s]
 # update minimum
    min_path = min(min_path, current_pathweight)
    return min_path

# Driver Code
if __name__ == "__main__":
 # matrix representation of graph
 graph = [[0, 10, 15, 20], [10, 0, 35, 25],[15, 35, 0, 30], [20, 25, 30, 0]]
 s = 0
 print(travellingSalesmanProblem(graph, s))

--------------------------------------------------------------------------------------------------------------------
#6. Implementation of the problem solving strategies: either using Forward Chaining or Backward Chaining
factskw=[['croaks', 'frog'],['eats flies','frog'],['frog','green'],['chirps','canary'],['sing','canary'],['canary','yellow']]
def check(str, factOb):
    facts=[]
    flag=True
    while flag==True:
        flag=False
        for txt in str:
            for A1 in factOb:
                if A1[0] == txt:
                    tmp = [txt,A1[1]]
                    if not tmp in facts:
                        facts += [tmp]
                        str += A1[1]
                        flag = True
    return facts
result = check(['sing', 'canary'], factskw)
print(result)

output:
[['sing', 'canary'], ['canary', 'yellow']]

class Rule:
    def __init__(self, conclusion, *premises):
        self.conclusion = conclusion
        self.premises = premises
def backward_chaining(goal, rules):
    agenda = [goal]
    while agenda:
        goal = agenda.pop(0)
        print("Processing goal:", goal)
        found = False
        for rule in rules:
            if goal in rule.premises:
                print("Found a rule with goal in its Chaining:")
                print(rule.conclusion, rule.premises, sep='->')
                found = True
                for premise in rule.premises:
                    if premise not in agenda:
                        agenda.append(premise)
        if not found:
            print("No rules found for:", goal)
            return False
        return True
# Example usage
rules = [Rule("A", "C"), Rule("B", "C"), Rule("C", "D")]
backward_chaining("C", rules)
# Output: True

output:
Processing goal: C
Found a rule with goal in its Chaining:
A->('C',)
Found a rule with goal in its Chaining:
B->('C',)
-------------------------------------------------------------------------------------------------------------------------

#7. Implement resolution principle on FOPL related problems

#DNF
import re
def dnf(formula): 
    if re.fullmatch(r'[A-Z]|~[A-Z]|()""', formula):
        return formula
    if 'and' in formula or 'or' in formula:
        parts = re.split(r'(?<=[^\w])or(?=[^\w])|(?<=[^\w])and(?=[^\w])', formula)
        print(f"parts: {parts}")
        dnf_parts = [dnf(part) for part in parts]
        print(f"dnf_parts: {dnf_parts}")
        if 'or' in formula:
            return " or ".join(parts)
        elif 'and' in formula:
            return " and ".join(parts)
# Example usage
formula = "(A and B) or B"
dnf_formula = dnf(formula)
print(dnf_formula) # Outputs: "A or C or B or D or"

output:
parts: ['(A ', ' B) ', ' B']
dnf_parts: [None, None, None]
(A  or  B)  or  B


#CNF
import re
def cnf(formula):
    if re.fullmatch(r'[A-Z]|~[A-Z]', formula):
        return formula
    if 'and' in formula or 'or' in formula:
        parts = re.split(r'(?<=\()or(?=\))|(?<=\()and(?=\))', formula)
        if 'and' in formula:
            return " and ".join(parts)
        elif 'or' in formula:
            return " or ".join(parts)
# Example usage
formula = "(A and B) or (C and D)"
cnf_formula = cnf(formula)
print(cnf_formula) # Outputs: "A and B or C and D or"

output:
(A and B) or (C and D)

--------------------------------------------------------------------------------------------------------------------------------
#8. Implement any Game and demonstrate the Game playing strategies

#Tic-tac Program
board = [[" " for _ in range(3)] for _ in range(3)]

def draw_board():
    print("  0 1 2")
    for i, row in enumerate(board):
        print(i, " ".join(row))

def get_move(player):
    while True:
        col = input(f"{player}, enter column: ")
        row = input(f"{player}, enter row: ")
        if col.isdigit() and row.isdigit():
            col, row = int(col), int(row)
            if 0 <= col < 3 and 0 <= row < 3:
                if board[row][col] == " ":
                    board[row][col] = player
                    return
                else:
                    print("That space is already occupied. Try again.")
            else:
                print("Invalid move. Try again.")
        else:
            print("Invalid input. Try again.")

def has_winner():
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return True
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return True
        if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
            return True
        if board[2][0] == board[1][1] == board[0][2] and board[2][0] != " ":
            return True
    return False

def main():
    while True:
        draw_board()
        get_move("X")
        if has_winner():
            print("X wins!")
            break
        draw_board()
        get_move("O")
        if has_winner():
            print("O wins!")
            break

main()

output:
0 1 2
0      
1      
2      
X, enter column: 1
X, enter row: 1
  0 1 2
0      
1   X  
2      
O, enter column: 0
O, enter row: 0
  0 1 2
0 O    
1   X  
2      
X, enter column: 2
X, enter row: 2
  0 1 2
0 O    
1   X  
2     X
O, enter column: 1
O, enter row: 0
  0 1 2
0 O O  
1   X  
2     X
X, enter column: 2
X, enter row: 0
  0 1 2
0 O O X
1   X  
2     X
O, enter column: 2
O, enter row: 1
  0 1 2
0 O O X
1   X O
2     X
X, enter column: 0
X, enter row: 2
X wins!
-------------------------------------------------------------------------------------------------------------------------------------









